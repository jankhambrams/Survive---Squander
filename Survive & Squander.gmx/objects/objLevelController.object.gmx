<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Level Generation
//  Resize the room
room_width = TILESIZE / 16 * 720;
room_height = TILESIZE / 16 * 720;

//  Set the grid width and height
var width = room_width div TILESIZE;
var height = room_width div TILESIZE;

//  Create the grid
grid = ds_grid_create(width, height);

//  Fill the grid with water
ds_grid_set_region(grid, 0, 0, width - 1, height - 1, WATER);

//  Randomize the seed
randomize();

//  Create the controller at the center of the grid
var cx = width div 2;
var cy = height div 2;

//  Give the controller a random direction
var cdir = irandom(3);

//  Set the odds variable for changing direction
var odds = 1;

//  Create the level using 1000 steps
repeat 1000
{
    //  Place a ground tile at the controller position
    grid[# cx, cy] = GROUND;
    
    //  Randomize the direction of the controller
    if irandom(odds) == odds
    {
        cdir = irandom(3);
    }
    //  Move the controller
    var xdir = lengthdir_x(1, cdir * 90);
    var ydir = lengthdir_y(1, cdir * 90);
    cx += xdir;
    cy += ydir;
    
    //  Make sure the controller doesn't move outside the grid
    cx = clamp(cx, 1, width - 2);
    cy = clamp(cy, 1, height - 2);
}
//  Scan tiles to add shore as a border between water and ground
for (var yy = 1; yy &lt; height - 1; yy++)
{
    for (var xx = 1; xx &lt; width - 1; xx++)
    {
        if grid[#xx, yy] = GROUND
        {
            if grid[# xx + 1, yy] != GROUND grid[# xx + 1, yy] = SHORE;    //right
            if grid[# xx - 1, yy] != GROUND grid[# xx - 1, yy] = SHORE;    //left
            if grid[# xx, yy + 1] != GROUND grid[# xx, yy + 1] = SHORE;    //bottom
            if grid[# xx, yy - 1] != GROUND grid[# xx, yy - 1] = SHORE;    //top
            if grid[# xx + 1, yy + 1] != GROUND grid[# xx + 1, yy + 1] = SHORE; //bottom right
            if grid[# xx + 1, yy - 1] != GROUND grid[# xx + 1, yy - 1] = SHORE; //top right
            if grid[# xx - 1, yy + 1] != GROUND grid[# xx - 1, yy + 1] = SHORE; //bottom left
            if grid[# xx - 1, yy - 1] != GROUND grid[# xx - 1, yy - 1] = SHORE; //top left
        }
    }
}
//  Draw the tiles
for (var yy = 1; yy &lt; height - 1; yy++)
{
    for (var xx = 1; xx &lt; width - 1; xx++)
    {
        //  Draw the ground
        if grid[# xx, yy] = GROUND
        {
            tile_add(bg_ground, 0, 0, TILESIZE, TILESIZE, xx * TILESIZE, yy * TILESIZE, 0);
        }
        //  Draw the shore
        else if grid[# xx, yy] = SHORE
        {
            tile_add(bg_shore, 0, 0, TILESIZE, TILESIZE, xx * TILESIZE, yy * TILESIZE, 0);
        }
        //  Draw the water
        else if grid[# xx, yy] = WATER
        {
            tile_add(bg_water, 0, 0, TILESIZE, TILESIZE, xx * TILESIZE, yy * TILESIZE, 0);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn in Objects
//  Spawn Player Objects
var rx = irandom_range(120, room_width - 120);
var ry = irandom_range(120, room_height - 120);
instance_create(rx, ry, objViewController);
instance_create(rx, ry, objMouse);
instance_create(rx, ry, objPlayerSpawner);

//  Spawn in Enemies
rx = room_width - rx;
ry = room_height - ry;
instance_create(rx, ry, objEnemySpawner);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
